{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the CTF Handbook.","text":"<p>Let's be honest. You are here because you failed a wisdom or initiative roll.  Time for the real adventure.</p> <p>THIS IS NOT GRAYLOG DOCUMENTATION.  There are actual professionals for that and they are very good at what they do.  You know who isn't good at what they do?  People who are tasked with reading documentation. Don't join the herd.</p> <p>Go start with either a crash course in Graylog for the express purpose of winning a CTF and not at all for the subliminal enjoyment of using our product in preparation to buy it at work OR the CTF Adventurers guide because you saw through this scheme and still want to win. </p> <p>Plus the people that make this software, this game, the documentation, the events, the marketing, and even the Sales guys are cool.  Heck, even Joe is cool, now.  </p>"},{"location":"#hack-on-demo","title":"HACK ON demo","text":""},{"location":"ctf/introduction/","title":"WTF is a CTF?!","text":"<p>You are the most okayest internet detective ever!  Luckily, you're a pretty rad TDIR analyst. </p>"},{"location":"ctf/pipeline-geopfsense/","title":"Geo-locationify my PFSense Data","text":""},{"location":"ctf/pipeline-geopfsense/#what-does-geo-provide-me","title":"What Does Geo provide me?","text":"<p>The Geo-Location Processor plugin scans all messages for fields containing exclusively an IP address, and puts their geo-location information (coordinates, ISO country code, and city name) into different fields. Read more in the Graylog documentation: https://go2docs.graylog.org/5-1/making_sense_of_your_log_data/geolocation.html.</p> <p>TLDR; This takes IPs and gives you location details</p> <p></p>"},{"location":"ctf/pipeline-geopfsense/#i-want-it","title":"I Want it","text":"<p>So let's get it enabled.</p> <ul> <li>Open your Graylog instance</li> <li>Navigate to <code>Enterprise -&gt; Illuminate</code></li> <li>Check off <code>Illuminate Core Geolocation and AS Enrichment Add-on for MaxMind Databases</code><ul> <li>Click <code>Enable Selected</code> </li> </ul> </li> <li>Navigate to <code>System -&gt; Configurations -&gt; Plugins</code><ul> <li>Click <code>Geo-Location Processor</code><ul> <li>Click <code>Edit configuration</code></li> <li>Click <code>Enable Geo-Location processor</code></li> <li>Update the paths to <code>/usr/share/graylog/data/config/</code>     &gt;Note, this path will differ depending on your configuration. This path is inside our Docker Container for this lab</li> <li> <p>Click <code>Update configuration</code></p> <p></p> </li> </ul> </li> </ul> </li> </ul> <p>Send those logs in again from the Dataset tab!</p> <p></p>"},{"location":"ctf/pipeline-geopfsense/#go-solve-some-ctf-flags","title":"GO SOLVE SOME CTF FLAGS!","text":"8888888888888888888888888888888888888888888888888888888888888888888888@8888 88888888888888@8@888888888888888888888888@888@888@8888888888@88888888888888 8888888@888888888@8@8@8@88X8@8@8X8@8@8@@88@@@8X@@8X@@@@@@88@8X8X8@888888888 88888@88X888X8X888X8 88X%S88 8 8 8 8 8 8 8 8 8 88S8S8S8S8X8X8X88S8 8 8 8 8 88@@8X8S8S8%X % 8@S88S 88X88 8S8X@X8@@ 88@8SS8 8S8 88888888888S8 8S8 888 8 88@8S8S8 8 @S88.88.888 88@\u00a0X88.;;@XXX8@@88888 888888888888:8S8 8S@8888%888 @@XX8S88888X%88t888 @8@@88SS 8 8 XSXS8S888%8S 8 8888 88X88 8888888S888X88@ @@X88888888 88X8:XS8SS88@\u00a0@88%S8 X8;8.8:8.X8@S88888S888888888888 88888@SS8 XX 8%8888 8XSt@S8S8X 8888:8X@8\u00a0%8%%St8.8 8;8t888888888888888888888888888888 S8S888888@88:8%8@tS@@8888X8:St. 88X8.8 tXS@t88 88888888888888888@888888888: S 888X8 888 88@St@%: 888 Xt8:S;8:@8t8S8t8%t;88 8888888 8 888888888888888888 S8S88@%888 X8%:%8;8X88@ X8 t8:8S8;8t8tX8@@X888 8888888888888S8@88888@888888 S88@8S8888888 :8 8X.888tX% :8%8@8X888%\u00a0tSt%8X88888888 88888888S8 888888888 X8 8 888888888S 88SX8:8.8 8\u00a0XS%SS@;S@XS8888t8%88888888S@8888%88888888S8S88 @888888888 8S88S8 88%8:%8tXX8SS88XtS8888888888888888888888888@8888 888888@8 8S88888888888@ :8tS:88@:88.\u00a0\u00a0\u00a0\u00a0@SX888 888888888@888%88@888@888@ 88X88888888 8888888888888888S8:%XtS888SX8888888 88 88888888888888888888888888@888888888 8888888888888888S;X@8S8888888 888 88 88888888888888888888888888888888888888 X88888@8@88@8@888t8XXS@888888888888888@8@8888888888888888888888@88888@8888 S@88@8888X88SX@8t\u00a0.;888@@8@8888888888888888888888@8888888888888888888888888 888888@888@@8@8@8888888888888888888888888888888888888888888888@8888888888@8 8S8888888888888888 8888@88@888@888888888888888888888888888888888888888888 8888888888888888888@8888@8888888@888888888888888888888888888888888888888888 @888888888888888888S%888888888@88888@@888888@88888888@@88@88888@88@888888@8 @8888888888888888888888@@@888@@@8@88X88X@888@888@888X8X888888X8@8888@88@888 X88888888@8888@88X88%888X88XSX8888S88X88X8S88S8S88S88S8X8@X888X8X8X8@8X8@8@ S@88X88@88X8X88S88X8 XXS88%8S88S8%8%88S888%8%888%8%%88S8S8X8X888S88S8S88X88 X@8X8S88S88SSX88S88X8@ 8@%888%8t88t8%88%%8%8%8%8%8%8S8%SX88SSXS88XSX88X88X8 XX88X8S8S8S8X8%%X8S888X888%%8t8%8%%S%S%8%8%8%8%%8%8%%X8S8S8S88S8S8X8XS@8XX@ X@888X8SSX8SSS8S8%8S88;.@S88%SS%S8%8S8%%X8%SS8%SX8S8X8S8SSX8X8SX@SX8XXX88@8 @88@88X8X8S8X8SSX8S8X8:%;8S8S8S8S8S8SSX8SSX8SS@8SSX8SSX8X8XSXS@S8@8X@88@888 @888@88@@@X@8S8X8SX@88;t %88X8S8SXX8X8X8X8X8X8X8X8XX@X8XX88@8888@@888888888 @8888@@88@88X@@8XX88S88 X ;88X@@8@X@X8X@8X@88@@88@88@@8@8@888@8888888888888"},{"location":"ctf/pipeline-grokgrok/","title":"GROK GROK WHO'S THERE?","text":""},{"location":"ctf/pipeline-grokgrok/#what-is-a-grok-anyway","title":"What is a GROK Anyway?","text":"<p>Grok is a way to match a line against a regular expression, map specific parts of the line into dedicated fields, and perform actions based on this mapping.</p> <p></p>"},{"location":"ctf/pipeline-grokgrok/#getting-started-with-grok","title":"Getting Started with GROK","text":"<p>Take the example log message and slap it in grok debugger: https://grokdebugger.com/ </p> <p>GROK makes turning logs into fields a breeze. With the example log message we can grab the IPs and ports with a few strokes.</p> <p></p>"},{"location":"ctf/pipeline-grokgrok/#example-log","title":"Example Log","text":"<pre><code>160,,,1483581762,ixl0,match,pass,in,4,0x0,,128,52842,0,DF,6,tcp,52,99.100.101.102,45.131.194.52,52045,5219,0,S,176942184,,64240,,mss;nop;wscale;nop;nop;sackOK\n</code></pre>"},{"location":"ctf/pipeline-grokgrok/#in-this-example-log-assume","title":"In this example log, assume:","text":"<p>Source IP: <code>99.100.101.102</code></p> <p>Destination IP: <code>45.131.194.52</code></p> <p>Source Port: <code>52045</code></p> <p>Destination Port <code>5219</code> </p> <p>There are so many patterns built-in. We are going to use <code>%{IPv4}</code> and <code>%{INT}</code> to grab the details of the source IP, Destination IP, Source Port and Destination Port:</p> <p></p> <p></p>"},{"location":"ctf/pipeline-grokgrok/#cool-now-what","title":"Cool, Now What?","text":"<p>Now we make log magic. Create a pipeline rule to automatically parse incoming logs on the pfsense stream. Thankfully we've done some of the work for you.  - Navigate to System -&gt; Pipelines -&gt; PFSense and edit the <code>Parse - PFSense - IPs and Ports</code> rule. - Update the rule with <code>your GROK Pattern</code>     - HINT: The image kinda gives it away... - Send those logs in again  from the Dataset tab!</p> <p></p>"},{"location":"ctf/pipeline-grokgrok/#go-solve-some-ctf-flags","title":"GO SOLVE SOME CTF FLAGS!","text":"8888888888888888888888888888888888888888888888888888888888888888888888@8888 88888888888888@8@888888888888888888888888@888@888@8888888888@88888888888888 8888888@888888888@8@8@8@88X8@8@8X8@8@8@@88@@@8X@@8X@@@@@@88@8X8X8@888888888 88888@88X888X8X888X8 88X%S88 8 8 8 8 8 8 8 8 8 88S8S8S8S8X8X8X88S8 8 8 8 8 88@@8X8S8S8%X % 8@S88S 88X88 8S8X@X8@@ 88@8SS8 8S8 88888888888S8 8S8 888 8 88@8S8S8 8 @S88.88.888 88@\u00a0X88.;;@XXX8@@88888 888888888888:8S8 8S@8888%888 @@XX8S88888X%88t888 @8@@88SS 8 8 XSXS8S888%8S 8 8888 88X88 8888888S888X88@ @@X88888888 88X8:XS8SS88@\u00a0@88%S8 X8;8.8:8.X8@S88888S888888888888 88888@SS8 XX 8%8888 8XSt@S8S8X 8888:8X@8\u00a0%8%%St8.8 8;8t888888888888888888888888888888 S8S888888@88:8%8@tS@@8888X8:St. 88X8.8 tXS@t88 88888888888888888@888888888: S 888X8 888 88@St@%: 888 Xt8:S;8:@8t8S8t8%t;88 8888888 8 888888888888888888 S8S88@%888 X8%:%8;8X88@ X8 t8:8S8;8t8tX8@@X888 8888888888888S8@88888@888888 S88@8S8888888 :8 8X.888tX% :8%8@8X888%\u00a0tSt%8X88888888 88888888S8 888888888 X8 8 888888888S 88SX8:8.8 8\u00a0XS%SS@;S@XS8888t8%88888888S@8888%88888888S8S88 @888888888 8S88S8 88%8:%8tXX8SS88XtS8888888888888888888888888@8888 888888@8 8S88888888888@ :8tS:88@:88.\u00a0\u00a0\u00a0\u00a0@SX888 888888888@888%88@888@888@ 88X88888888 8888888888888888S8:%XtS888SX8888888 88 88888888888888888888888888@888888888 8888888888888888S;X@8S8888888 888 88 88888888888888888888888888888888888888 X88888@8@88@8@888t8XXS@888888888888888@8@8888888888888888888888@88888@8888 S@88@8888X88SX@8t\u00a0.;888@@8@8888888888888888888888@8888888888888888888888888 888888@888@@8@8@8888888888888888888888888888888888888888888888@8888888888@8 8S8888888888888888 8888@88@888@888888888888888888888888888888888888888888 8888888888888888888@8888@8888888@888888888888888888888888888888888888888888 @888888888888888888S%888888888@88888@@888888@88888888@@88@88888@88@888888@8 @8888888888888888888888@@@888@@@8@88X88X@888@888@888X8X888888X8@8888@88@888 X88888888@8888@88X88%888X88XSX8888S88X88X8S88S8S88S88S8X8@X888X8X8X8@8X8@8@ S@88X88@88X8X88S88X8 XXS88%8S88S8%8%88S888%8%888%8%%88S8S8X8X888S88S8S88X88 X@8X8S88S88SSX88S88X8@ 8@%888%8t88t8%88%%8%8%8%8%8%8S8%SX88SSXS88XSX88X88X8 XX88X8S8S8S8X8%%X8S888X888%%8t8%8%%S%S%8%8%8%8%%8%8%%X8S8S8S88S8S8X8XS@8XX@ X@888X8SSX8SSS8S8%8S88;.@S88%SS%S8%8S8%%X8%SS8%SX8S8X8S8SSX8X8SX@SX8XXX88@8 @88@88X8X8S8X8SSX8S8X8:%;8S8S8S8S8S8SSX8SSX8SS@8SSX8SSX8X8XSXS@S8@8X@88@888 @888@88@@@X@8S8X8SX@88;t %88X8S8SXX8X8X8X8X8X8X8X8XX@X8XX88@8888@@888888888 @8888@@88@88X@@8XX88S88 X ;88X@@8@X@X8X@8X@88@@88@88@@8@8@888@8888888888888"},{"location":"ctf/pipeline-illuminatepfsense/","title":"Illuminate my PFSense Data","text":""},{"location":"ctf/pipeline-illuminatepfsense/#what-is-illuminate","title":"What is Illuminate?","text":"<p>Graylog Illuminate provides pre-built content designed with common cybersecurity and log management questions in mind to give you the fast start you need for success. Available with Graylog Operations and Graylog Security, our pre-built content better equips you to monitor and manage challenges that can range from unlocking passwords to hunting for that bad actor that breached your network.</p> <p>TLDR; Illuminate pasrses logs <code>for you</code> and comes with canned <code>dashboards and events</code></p> <p></p>"},{"location":"ctf/pipeline-illuminatepfsense/#i-want-it","title":"I Want it","text":"<p>So let's get it enabled. Our labs come with an old version of illuminate installed but not running. Let's update and get it parsing our logs.</p> <ul> <li>Open your Graylog instance</li> <li> <p>Navigate to <code>Enterprise -&gt; Illuminate</code></p> <p></p> </li> <li> <p>Check off <code>Illuminate x.x.x:pfSense/OPNsense Firewall</code> in the processing packs</p> <p></p> <p><code>**It should look similar to this**</code></p> </li> </ul> <p></p> <ul> <li> <p>Click <code>Enable Selected</code></p> <p></p> <p>WITHOUT THIS STEP NOTHING WILL HAPPEN WITH YOUR LOG DATA - Configure the PFSense routing following <code>Graylog Server Configuration for a Specific Input</code> located in our docs page: https://go2docs.graylog.org/5-1/what_more_can_graylog_do_for_me/pfsense_firewall_security_content_pack.htm</p> <p>Seriously, did you do it yet?</p> <p>Send those logs in again from the Dataset tab!</p> </li> </ul> <p></p>"},{"location":"ctf/pipeline-illuminatepfsense/#go-solve-some-ctf-flags","title":"GO SOLVE SOME CTF FLAGS!","text":"8888888888888888888888888888888888888888888888888888888888888888888888@8888 88888888888888@8@888888888888888888888888@888@888@8888888888@88888888888888 8888888@888888888@8@8@8@88X8@8@8X8@8@8@@88@@@8X@@8X@@@@@@88@8X8X8@888888888 88888@88X888X8X888X8 88X%S88 8 8 8 8 8 8 8 8 8 88S8S8S8S8X8X8X88S8 8 8 8 8 88@@8X8S8S8%X % 8@S88S 88X88 8S8X@X8@@ 88@8SS8 8S8 88888888888S8 8S8 888 8 88@8S8S8 8 @S88.88.888 88@\u00a0X88.;;@XXX8@@88888 888888888888:8S8 8S@8888%888 @@XX8S88888X%88t888 @8@@88SS 8 8 XSXS8S888%8S 8 8888 88X88 8888888S888X88@ @@X88888888 88X8:XS8SS88@\u00a0@88%S8 X8;8.8:8.X8@S88888S888888888888 88888@SS8 XX 8%8888 8XSt@S8S8X 8888:8X@8\u00a0%8%%St8.8 8;8t888888888888888888888888888888 S8S888888@88:8%8@tS@@8888X8:St. 88X8.8 tXS@t88 88888888888888888@888888888: S 888X8 888 88@St@%: 888 Xt8:S;8:@8t8S8t8%t;88 8888888 8 888888888888888888 S8S88@%888 X8%:%8;8X88@ X8 t8:8S8;8t8tX8@@X888 8888888888888S8@88888@888888 S88@8S8888888 :8 8X.888tX% :8%8@8X888%\u00a0tSt%8X88888888 88888888S8 888888888 X8 8 888888888S 88SX8:8.8 8\u00a0XS%SS@;S@XS8888t8%88888888S@8888%88888888S8S88 @888888888 8S88S8 88%8:%8tXX8SS88XtS8888888888888888888888888@8888 888888@8 8S88888888888@ :8tS:88@:88.\u00a0\u00a0\u00a0\u00a0@SX888 888888888@888%88@888@888@ 88X88888888 8888888888888888S8:%XtS888SX8888888 88 88888888888888888888888888@888888888 8888888888888888S;X@8S8888888 888 88 88888888888888888888888888888888888888 X88888@8@88@8@888t8XXS@888888888888888@8@8888888888888888888888@88888@8888 S@88@8888X88SX@8t\u00a0.;888@@8@8888888888888888888888@8888888888888888888888888 888888@888@@8@8@8888888888888888888888888888888888888888888888@8888888888@8 8S8888888888888888 8888@88@888@888888888888888888888888888888888888888888 8888888888888888888@8888@8888888@888888888888888888888888888888888888888888 @888888888888888888S%888888888@88888@@888888@88888888@@88@88888@88@888888@8 @8888888888888888888888@@@888@@@8@88X88X@888@888@888X8X888888X8@8888@88@888 X88888888@8888@88X88%888X88XSX8888S88X88X8S88S8S88S88S8X8@X888X8X8X8@8X8@8@ S@88X88@88X8X88S88X8 XXS88%8S88S8%8%88S888%8%888%8%%88S8S8X8X888S88S8S88X88 X@8X8S88S88SSX88S88X8@ 8@%888%8t88t8%88%%8%8%8%8%8%8S8%SX88SSXS88XSX88X88X8 XX88X8S8S8S8X8%%X8S888X888%%8t8%8%%S%S%8%8%8%8%%8%8%%X8S8S8S88S8S8X8XS@8XX@ X@888X8SSX8SSS8S8%8S88;.@S88%SS%S8%8S8%%X8%SS8%SX8S8X8S8SSX8X8SX@SX8XXX88@8 @88@88X8X8S8X8SSX8S8X8:%;8S8S8S8S8S8SSX8SSX8SS@8SSX8SSX8X8XSXS@S8@8X@88@888 @888@88@@@X@8S8X8SX@88;t %88X8S8SXX8X8X8X8X8X8X8X8XX@X8XX88@8888@@888888888 @8888@@88@88X@@8XX88S88 X ;88X@@8@X@X8X@8X@88@@88@88@@8@8@888@8888888888888"},{"location":"ctf/sql-injection_1/","title":"SQL Injection - Intro","text":""},{"location":"ctf/sql-injection_1/#wtf-is-sql-injection","title":"WTF is SQL Injection","text":"<p>If you've never popped a shell on a remote box, we forgive you.  We love you and its ok.  This is a safe space. </p>"},{"location":"ctf/sql-injection_1/#seriously-please-explain-it","title":"Seriously, please explain it","text":"<p>Alright, you data-dodging, code-jockeying cyberpunks, time to jack in. We're gonna surf down the gnarliest wave in the silicon sea, the dangerous underbelly of our digital utopia - the SQL injection. This ain't no Y2K bug, kids. We're talking about a real ghost in the machine.</p> <p>So, you've built yourself a sweet little database, as pristine as a fresh install of Windows '98. It hums along, handling queries like a pro, secure as a dial-up connection in a land of fiber optics. But, beware, my friends, for there are wolves in these woods.</p> <p>Your app is running a simple login form. A harmless query, right? SELECT * FROM Users WHERE Username='[username]' AND Password='[password]';</p> <p>But then, in saunters our bad actor, as slick as Zero Cool on a fresh keyboard. Instead of a simple username, they slide in a sneaky little snippet: ' OR '1'='1.</p> <p>Suddenly, your innocent query morphs into this monstrosity: SELECT * FROM Users WHERE Username='' OR '1'='1' AND Password='[password]';</p> <p>And now, the game is up. '1' is always '1', just as the Logfather always sees the world in regex. Your query spills its guts, returning every user, and our digital villain is logged in as the first user in the list, usually the admin. Your system's been pwned, dude. It's like leaving your backdoor wide open in the middle of DEF CON.</p> <p>So, what's the game plan, hotshot? Simple - don't trust user input. Treat it like it's got the same cooties as a chain email from the early 2000s. Sanitize that stuff, use prepared statements, and keep your database locked down tighter than your embarrassing Myspace account.</p> <p>In the end, we all want to be the Logfather of our data: unruffled, insightful, and always catching the bugs in the matrix. Just remember - the keyboard is mightier than the sword!</p> <p>I mean, you said 'seriously' but I didn't take you seriously. </p> <p>I reward those who follow instructions.  Spoilers ahead.  </p>"},{"location":"ctf/sql-injection_2/","title":"SQL Injection - Part Deux","text":""},{"location":"ctf/sql-injection_2/#how-do-i-even","title":"How do I even?","text":"<p>Alright, all you cybernauts, fasten your seatbelts and put your keyboards in the upright position - we're about to take a deep dive into the notorious world of SQL injection. We're talking about the MariaDB backend, an HTTP post, URL encoding, a sprinkle of educated guessing, and the pi\u00e8ce de r\u00e9sistance: the UNION command.</p> <p>Let's set the stage. You've got a web app - one of those relics from the early 2000s, coded by some caffeine-fueled developer who thought SQL injection was a medical condition. The app's got a MariaDB backend, and it's serving up data as eagerly as a golden retriever fetching a tennis ball.</p> <p>For instance, you've got a URL like this: <code>http://example.com/products?catid=1000</code>. This harmless-looking URL is actually a goldmine for an attacker. It's passing the catid parameter directly into an SQL statement behind the scenes. Something like this:</p> <pre><code>SELECT * FROM Products WHERE catid = 1000;\n</code></pre> <p>Now, our intrepid hacker, armed with nothing but a keyboard and a solid understanding of SQL, decides to add a little something extra to that catid parameter, like <code>'</code> OR <code>'1'='1</code>. The resulting query?</p> <pre><code>SELECT * FROM Products WHERE catid = '1000' OR '1'='1';\n</code></pre> <p>And boom! Just like that, the entire product catalogue is laid bare. But our hacker wants more. They want to see what other databases are hiding in the shadows. So, they might try injecting a command to list databases, URL encoded of course, like </p> <pre><code>' UNION SELECT schema_name, 2, 3 FROM information_schema.schemata --\n</code></pre> <p>This will give them a list of all databases. From here, it's a guessing game. <code>'users'</code>, <code>'customers'</code>, <code>'members'</code> - common names for databases holding juicy information.</p> <p>But here's where the magic happens. The <code>UNION</code> command is the Swiss Army knife of SQL injection. It allows our hacker to combine the results of their injected query with the results of the original query. But there's a catch: the number of columns in the UNIONed query has to match the original.</p> <p>If our original query was fetching three columns of data, our injection needs to request three columns too. Any more or less, and it'll spit out errors like a broken vending machine.</p> <p>So, let's say our hacker knows there's a <code>'users'</code> database and it contains <code>'firstname'</code>, <code>'email'</code>, and <code>'password'</code> columns. They could craft an injection like this: </p> <pre><code>catid=1000 UNION SELECT firstname, email, lastname FROM users LIMIT 7, 100\n</code></pre> <p>In URL encoding, it would look like this: </p>"},{"location":"ctf/sql-injection_2/#there-do-be-answers-here","title":"THERE DO BE ANSWERS HERE","text":"<pre><code>catid=1000%20UNION%20SELECT%20firstname%2C%20email%2C%20lastname%20FROM%20users%20LIMIT%207%2C%20100\n</code></pre> <p>This pulls the first name, email, and last name from the users database, starting from the 7th entry and for the next 100 entries. And just like that, our hacker has scored a treasure trove of data.  I wonder, I really really wonder, if there are any other columns that could be useful.  The Logfather would know...</p> <p>Remember, my friends, with great power comes great responsibility. SQL injections are a potent tool in the wrong hands. As cyber warriors, it's our job to defend against such threats. So, keep your wits about you, sanitize your inputs, and keep your apps secure. The future of the digital realm depends on it.</p>"},{"location":"ctf/webhook/","title":"Webhooks are the new Socks and Sandals","text":"<p>Used to be fashionably uncool, and now the kids can't live without them.</p> <p>Who doesn't love getting more notifications?  Do you wake up in the morning and demand to receive more things to steal your attention?  If you haven't spent a mandatory 45 minutes today in the restroom scrolling the most important feeds of your life and ignoring the world around you, we have just the tool. </p>"},{"location":"ctf/webhook/#more-notifications","title":"More notifications","text":"<p>You can set up these marvelous notification creatures in a lot of ways.  At Graylog, we give you some fantastic options.  Slack, Teams, Discord, PagerDuty - or just straight up HTTP so you can treat your notifications like a Long Island Iced Tea.  A long island iced tea is just the adult version of making swamp water at a fountain drink machine.  They say excessive notifications have caused humans to have shorter attention spans.  Did you know the word Human comes from the latin word 'humus' meaning earth or ground? </p>"},{"location":"ctf/webhook/#squirrel","title":"Squirrel","text":"<p>Look at your toolbar called 'Hooks'.  Now you can build Event Notifications!  Use that URL when it matters. </p>"},{"location":"ctf/graylog/Introduction/","title":"Welcome to the Graylog Capture the Flag Challenge!","text":"<p>Let's get familiar with the interface. Please complete the following! - Successfully Log in to your Graylog instance - Checkout the Datasets Tab - Checkout the Webhooks Tab - Take note of the <code>Lessons</code> as they provide loads of valuable tips!</p> <p></p>"},{"location":"ctf/graylog/Introduction/#accessing-graylog-web-interface","title":"Accessing Graylog Web Interface","text":"<p>There are multiple ways of accessing the Graylog URL specific to your lab.  </p>"},{"location":"ctf/graylog/Introduction/#using-the-public-ip","title":"Using the public IP","text":"<p>Your Graylog instance URL is displayed on the Graylog Server launch screen.  It should be a variation of:  <code>https://YourUserName-lab.logfather.org</code></p>"},{"location":"ctf/graylog/Introduction/#using-the-graylog-tab-from-the-graylog-server","title":"Using the Graylog tab from the Graylog server","text":""},{"location":"ctf/graylog/Introduction/#logging-in","title":"Logging In","text":"<p>Navigate to your personalized Graylog instance. </p> <p>You can use a separate browser tab on your own computer or the windows desktop included in this lab environment (if applicable).</p>"},{"location":"ctf/graylog/Introduction/#your-lab-details","title":"Your Lab Details","text":"Username: <code>admin</code> Password: <code>yabba dabba doo</code> <p>(Note the spaces)</p> <p></p>"},{"location":"ctf/graylog/Introduction/#activity-data-sets","title":"Activity: Data Sets!","text":"<p>Open the Logs Tab from the Graylog server</p> <p></p> <p>These will be the datasets used within the CTF Challenges. They should look very similar to the below </p> <p></p> <p>Expect to see questions specifying specific datasets! </p> <p></p>"},{"location":"ctf/graylog/Introduction/#simulated-log-data","title":"Simulated Log Data","text":"<p>This is how the screen appears when logs are being continuously simulated.  This may flash by very quickly, such as the demo you just performed.  </p> <p></p>"},{"location":"ctf/graylog/Introduction/#activity-alternate-access-methods","title":"Activity: Alternate Access Methods","text":"<p>The Graylog Server virtual machine within the lab is running Graylog and some additional services.</p> <p>Every machine also has a public IP address and DNS name that can be found by clicking the gear next to the virtual machine name and selecting Machine Info.  This information can be used for the variety of SSH or Log Ingestion tasks throughout your training.</p> <p>Try to access the Graylog Web Interface in a different method than you are currently using.</p> <p>Use whichever method of accessing the material works best for you!</p> <p></p>"},{"location":"ctf/graylog/Introduction/#viewing-log-data","title":"Viewing Log Data","text":"<p>Once you have clicked on a dataset, you can view the incoming log from the SEARCH tab.  The default settings for this search should be sufficient to view any logs unless otherwise stated. </p> <p>Clicking on a message from the Default Stream table will expand the message showing all of the data and fields within that message.  </p> <p></p>"}]}